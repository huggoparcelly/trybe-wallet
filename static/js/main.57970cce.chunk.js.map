{"version":3,"sources":["actions/index.js","pages/Login.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/index.js","index.js"],"names":["walletAction","expenses","dispatch","type","fetch","then","r","json","data","payload","exchangeRates","getExpense","fetchAPI","currencies","Login","props","state","email","password","passwordLength","this","emailValue","getCoins","disabled","length","match","placeholder","value","data-testid","onChange","e","setState","target","to","onClick","React","Component","connect","userAction","Wallet","id","description","currency","method","tag","getExpenses","count","forEach","expense","ask","Number","toFixed","htmlFor","name","handleChange","coins","Object","keys","filter","coin","map","key","addExpense","countId","split","prevState","getHeader","getValue","getDescription","getPayment","getTag","getBtn","getTable","user","wallet","App","exact","path","component","Boolean","window","location","hostname","INITIAL_STATE","userReducer","action","isLoadind","walletReducer","reducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.57970cce.chunk.js","sourcesContent":["// Coloque aqui suas actions\nexport const USER_ENTER = 'USER_ENTER';\nexport const REQUEST_API = 'REQUEST_API';\nexport const GET_COIN = 'GET_COIN';\nexport const ADD_EXPENSE = 'ADD_EXPENSE';\nexport const COUNT_EXPENSE = 'COUNT_EXPENSE';\n\nexport function userAction(email) {\n  return {\n    type: USER_ENTER,\n    email,\n  };\n}\n\nexport const requestAPI = () => ({\n  type: REQUEST_API,\n});\n\nexport const getCoin = (data) => ({\n  type: GET_COIN,\n  payload: {\n    currencies: data,\n  },\n});\n\nexport const getExpense = (expenses, data) => ({\n  type: ADD_EXPENSE,\n  payload: {\n    ...expenses,\n    exchangeRates: data,\n  },\n});\n\nexport const getCount = () => ({\n  type: COUNT_EXPENSE,\n});\n\nexport function walletAction(expenses) {\n  return (dispatch) => {\n    dispatch(requestAPI());\n    fetch('https://economia.awesomeapi.com.br/json/all')\n      .then((r) => (r.json()))\n      .then((json) => {\n        dispatch(getExpense(expenses, json));\n      });\n  };\n}\n\nexport function fetchAPI() {\n  return (dispatch) => {\n    dispatch(requestAPI());\n    return fetch('https://economia.awesomeapi.com.br/json/all')\n      .then((r) => r.json()\n        .then(\n          (json) => dispatch(getCoin(json)),\n        ));\n  };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { fetchAPI, userAction } from '../actions';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    const PASSWORD_MIN = 6;\n    this.state = {\n      email: '',\n      password: '',\n      passwordLength: PASSWORD_MIN,\n    };\n  }\n\n  render() {\n    const { email, password, passwordLength } = this.state;\n    const { emailValue, getCoins } = this.props;\n    const emailValidate = (\n      /^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})$/\n    );\n    const disabled = (password.length < passwordLength) || (!email.match(emailValidate));\n    return (\n      <form>\n        <input\n          type=\"email\"\n          placeholder=\"Email\"\n          value={ email }\n          data-testid=\"email-input\"\n          onChange={ (e) => this.setState({ email: e.target.value }) }\n        />\n\n        <input\n          type=\"password\"\n          placeholder=\"Senha\"\n          value={ password }\n          data-testid=\"password-input\"\n          onChange={ (e) => this.setState({ password: e.target.value }) }\n        />\n        <Link to=\"/carteira\">\n          <button\n            type=\"submit\"\n            disabled={ disabled }\n            onClick={ () => {\n              emailValue({ email });\n              getCoins();\n            } }\n          >\n            Entrar\n          </button>\n        </Link>\n      </form>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  emailValue: (email) => (dispatch(userAction(email))),\n  getCoins: () => dispatch(fetchAPI()),\n});\n\nLogin.propTypes = {\n  emailValue: PropTypes.func.isRequired,\n  getCoins: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchAPI, walletAction } from '../actions';\n\nclass Wallet extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n  }\n\n  componentDidMount() {\n    const { getCoins } = this.props;\n    getCoins();\n  }\n\n  getHeader(email) {\n    const { getExpenses } = this.props;\n    let count = 0;\n    getExpenses.forEach((expense) => {\n      count += (expense.value * expense.exchangeRates[expense.currency].ask);\n    });\n    return (\n      <header>\n        <span data-testid=\"email-field\">{ `Email: ${email}` }</span>\n        <p data-testid=\"total-field\">{ `Total: ${Number(count).toFixed(2)}` }</p>\n        <p data-testid=\"header-currency-field\">BRL</p>\n      </header>);\n  }\n\n  getValue() {\n    const { value } = this.state;\n    return (\n      <label htmlFor=\"expenses\">\n        Valor:\n        <input\n          type=\"number\"\n          id=\"expenses\"\n          name=\"value\"\n          value={ value }\n          onChange={ (e) => this.handleChange(e) }\n        />\n      </label>);\n  }\n\n  getDescription() {\n    const { description } = this.state;\n    return (\n      <label htmlFor=\"description\">\n        Descrição:\n        <input\n          type=\"text\"\n          id=\"description\"\n          name=\"description\"\n          value={ description }\n          onChange={ (e) => this.handleChange(e) }\n        />\n      </label>\n    );\n  }\n\n  getCoins() {\n    const { currency } = this.state;\n    const { coins } = this.props;\n    const currencies = Object.keys(coins).filter((coin) => coin !== 'USDT');\n    return (\n      <label htmlFor=\"coin\">\n        Moeda:\n        <select\n          id=\"coin\"\n          name=\"currency\"\n          value={ currency }\n          onChange={ (e) => this.handleChange(e) }\n        >\n          {currencies.map((coin) => (\n            <option value={ coin } key={ coin }>{coin}</option>\n          ))}\n        </select>\n      </label>\n    );\n  }\n\n  getPayment() {\n    const { method } = this.state;\n    return (\n      <label htmlFor=\"payment\">\n        Método de pagamento:\n        <select\n          id=\"payment\"\n          name=\"method\"\n          value={ method }\n          onChange={ (e) => this.handleChange(e) }\n        >\n          <option value=\"Dinheiro\">Dinheiro</option>\n          <option value=\"Cartão de crédito\">Cartão de crédito</option>\n          <option value=\"Cartão de débito\">Cartão de débito</option>\n        </select>\n      </label>\n    );\n  }\n\n  getTag() {\n    const { tag } = this.state;\n    return (\n      <label htmlFor=\"tag\">\n        Tag:\n        <select\n          id=\"tag\"\n          name=\"tag\"\n          value={ tag }\n          onChange={ (e) => this.handleChange(e) }\n        >\n          <option value=\"Alimentação\">Alimentação</option>\n          <option value=\"Lazer\">Lazer</option>\n          <option value=\"Trabalho\">Trabalho</option>\n          <option value=\"Transporte\">Transporte</option>\n          <option value=\"Saúde\">Saúde</option>\n        </select>\n      </label>\n    );\n  }\n\n  getBtn() {\n    const { id, value, description, currency, method, tag } = this.state;\n    const { addExpense } = this.props;\n    return (\n      <button\n        type=\"button\"\n        onClick={ () => {\n          addExpense({ id, value, description, currency, method, tag });\n          this.countId();\n        } }\n      >\n        Adicionar despesa\n      </button>\n    );\n  }\n\n  getTable() {\n    const { getExpenses } = this.props;\n    return (\n      <table>\n        <thead>\n          <tr>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Método de pagamento</th>\n            <th>Valor</th>\n            <th>Moeda</th>\n            <th>Câmbio utilizado</th>\n            <th>Valor convertido</th>\n            <th>Moeda de conversão</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody>\n          { getExpenses.map((expense) => (\n            <tr key={ expense.id }>\n              <td key={ expense.description }>{expense.description}</td>\n              <td key={ expense.tag }>{expense.tag}</td>\n              <td key={ expense.method }>{expense.method}</td>\n              <td key={ expense.value }>{expense.value}</td>\n              <td key={ expense.currency }>\n                { expense.exchangeRates[expense.currency].name.split('/')[0] }\n              </td>\n              <td key=\"Price\">\n                { Number(expense.exchangeRates[expense.currency].ask).toFixed(2) }\n              </td>\n              <td key=\"converted value\">\n                { Number((expense.value)\n                  * (expense.exchangeRates[expense.currency].ask)).toFixed(2)}\n              </td>\n              <td key=\"BRL\">Real</td>\n            </tr>\n          )) }\n        </tbody>\n      </table>\n    );\n  }\n\n  handleChange({ target }) {\n    const { value, name } = target;\n    this.setState({ [name]: value });\n  }\n\n  countId() {\n    this.setState((prevState) => ({\n      id: prevState.id + 1,\n    }));\n  }\n\n  render() {\n    const { email } = this.props;\n    return (\n      <>\n        {this.getHeader(email)}\n        <form>\n          {this.getValue()}\n          {this.getDescription()}\n          {this.getCoins()}\n          {this.getPayment()}\n          {this.getTag()}\n          {this.getBtn()}\n        </form>\n        {this.getTable()}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  email: state.user.email,\n  coins: state.wallet.currencies,\n  getExpenses: state.wallet.expenses,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addExpense: (value) => dispatch(walletAction(value)),\n  getCoins: () => dispatch(fetchAPI()),\n});\n\nWallet.propTypes = {\n  email: PropTypes.string,\n}.isRequired;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route } from 'react-router';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div>\n        <Route exact path=\"/\" component={ Login } />\n        <Route path=\"/carteira\" component={ Wallet } />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// Esse reducer será responsável por tratar as informações da pessoa usuária\nimport { USER_ENTER } from '../actions';\n\nconst INITIAL_STATE = {};\n\nfunction userReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case USER_ENTER:\n    return action.email;\n  default:\n    return state;\n  }\n}\n\nexport default userReducer;\n","// Esse reducer será responsável por tratar o todas as informações relacionadas as despesas\nimport { REQUEST_API, GET_COIN, ADD_EXPENSE, COUNT_EXPENSE } from '../actions';\n\nconst INITIAL_STATE = {\n  currencies: [],\n  expenses: [],\n  count: 0,\n  isLoadind: false,\n};\n\nfunction walletReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case REQUEST_API:\n    return {\n      ...state,\n      isLoadind: true,\n    };\n  case GET_COIN:\n    return {\n      ...state,\n      currencies: action.payload.currencies,\n      isLoadind: false,\n    };\n  case ADD_EXPENSE:\n    return {\n      ...state,\n      expenses: [\n        ...state.expenses,\n        action.payload],\n      isLoadind: false,\n    };\n  case COUNT_EXPENSE:\n    return {\n      ...state,\n      // count,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\n// Configure os seus reducers.\nconst reducer = combineReducers({\n  user,\n  wallet,\n});\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nexport default reducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport reducer from '../reducers';\n\nconst store = createStore(\n  reducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter basename={ process.env.PUBLIC_URL }>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}